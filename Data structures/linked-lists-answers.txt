1. What are some pros and cons of using linked lists instead of arrays?

Pros are that the since each node is independent that can take any available space unlike an array where the data is being forced to take space next to one another.

Cons include takes more time to find a element due to the fact that all searches must start from the beginning.

2. Come up with a real world example of a linked list.

A: A music playlist is a example of a linked list.

Programming Questions

1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.


A: The new node is being added right after head cutting off lots of potifalt other nodes. To fix a loop is needed to go down the list to the end for the new node.

function push(element){
	var newnode = new Node(element)
	newnode.next= null;
	if(headNode == null){
		var headNode = newnode;
	}else{
		var current = headNode;
		
		while(current.next !== null){
			current = current.next;
		}
		current.next = newNode;
	}
}



2. Given an unsorted singly linked list, remove all duplicates from the linked list.

class Node {
	constructor(value){
		this.value = value;
		this.next = null;
	}
}

class LinkedList {
	constructor() {
    this.head = null;
    this.length = 0;
  }
  
	create(value) {
		var newNode = new Node(value);
    
		if (this.head === null) {
		this.head = newNode;
		} else {
		var currentNode = this.head;
		
		while (currentNode.next !== null) {
			currentNode = currentNode.next;
		}
      
		currentNode.next = newNode;
		}
		this.length++;
	}
  
  
	print() {
		var currentNode = this.head;
		
		while (currentNode !== null) {
		console.log(currentNode.value);
		currentNode = currentNode.next;
		}
	}
	remove(){
		var searcher = this.head;
		var current = searcher.next;
		var prev;
		while (searcher !== null){
			while(current !== null){
				if(searcher.value == current.value && searcher.next.value == current.value){
					searcher.next = current.next;
					current = searcher.next;
					this.length -=1;
				}
				else if(searcher.value == current.value){
					prev.next = current.next;
					current = prev.next;
					this.length -=1;
				}
				else{
					prev = current;
					current = current.next;
				}
			}
			searcher = searcher.next;
			if(searcher === null){
			}else{current = searcher.next}
		}
	}
}

var testList = new LinkedList();

testList.create('a');
testList.create('c');
testList.create('a');
testList.create('c');
testList.create('b');

console.log("Linked list before removing duplicates ");
testList.print();
testList.remove();
console.log("Linked list after removing duplicates ");
testList.print();

3. Given an unsorted singly linked list, reverse it.
class Node {
	constructor(value){
		this.value = value;
		this.next = null;
	}
}

class LinkedList {
	constructor() {
    this.head = null;
    this.length = 0;
  }
  
	create(value) {
		var newNode = new Node(value);
    
		if (this.head === null) {
		this.head = newNode;
		} else {
		var currentNode = this.head;
		
		while (currentNode.next !== null) {
			currentNode = currentNode.next;
		}
      
		currentNode.next = newNode;
		}
		this.length++;
	}
  
  
	print() {
		var currentNode = this.head;
		
		while (currentNode !== null) {
		console.log(currentNode.value);
		currentNode = currentNode.next;
		}
	}
	reverse(){
		var current = this.head;
		var prev = null;
		var next;
		while (current){
			next = current.next; 
			current.next = prev; 
			prev = current; 
			current = next;
		}
      this.head = prev;
	}
}

var testList = new LinkedList();

testList.create('a');
testList.create('b');
testList.create('c');
testList.create('d');

console.log("Before list is reversed");
testList.print();
testList.reverse();
console.log("After list is reversed");
testList.print();